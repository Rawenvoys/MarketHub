// <auto-generated />
using System;
using MarketHub.Microservices.Rates.Infrastructure.Persistance.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MarketHub.Microservices.Rates.Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(RatesDbContext))]
    [Migration("20251024102636_MigrateDb")]
    partial class MigrateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MarketHub.Microservices.Rates.Domain.Aggregates.Source", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cron")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Cron");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("SyncStrategy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SyncStrategy");

                    b.HasKey("Id");

                    b.ToTable("Source", "rates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d07ebbb0-ee4b-4d13-8ef7-8ef007ae77e3"),
                            Cron = "* * 16 3 * *",
                            Name = "Kursy średnie walut obcych – tabela B",
                            Status = 1,
                            SyncStrategy = "NbpApiDateRange"
                        });
                });

            modelBuilder.Entity("MarketHub.Microservices.Rates.Domain.Aggregates.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnName("EffectiveDate");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Number");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("Table", "rates");
                });

            modelBuilder.Entity("MarketHub.Microservices.Rates.Domain.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("Code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Currency", "rates");
                });

            modelBuilder.Entity("MarketHub.Microservices.Rates.Domain.Entities.CurrencyRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Mid")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Mid");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TableId", "CurrencyId")
                        .IsUnique()
                        .HasDatabaseName("IX_CurrencyRate_TableId_CurrencyId");

                    b.ToTable("CurrencyRate", "rates");
                });

            modelBuilder.Entity("MarketHub.Microservices.Rates.Domain.Aggregates.Table", b =>
                {
                    b.HasOne("MarketHub.Microservices.Rates.Domain.Aggregates.Source", "Source")
                        .WithMany("Tables")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("MarketHub.Microservices.Rates.Domain.Entities.CurrencyRate", b =>
                {
                    b.HasOne("MarketHub.Microservices.Rates.Domain.Entities.Currency", "Currency")
                        .WithMany("CurrencyRates")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketHub.Microservices.Rates.Domain.Aggregates.Table", "Table")
                        .WithMany("CurrencyRates")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("MarketHub.Microservices.Rates.Domain.Aggregates.Source", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("MarketHub.Microservices.Rates.Domain.Aggregates.Table", b =>
                {
                    b.Navigation("CurrencyRates");
                });

            modelBuilder.Entity("MarketHub.Microservices.Rates.Domain.Entities.Currency", b =>
                {
                    b.Navigation("CurrencyRates");
                });
#pragma warning restore 612, 618
        }
    }
}
